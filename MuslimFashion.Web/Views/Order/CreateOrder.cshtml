@using DevMaker.FileStorage

@{
    ViewData["Title"] = "Create Order";
    Layout = "~/Views/Shared/_AdminLayout.cshtml";
    var baseUrl = FileBuilder.RootUrl;
}

@section Styles{
    <style>
        .size-radio { margin-right: 10px; }
        .size-radio [type=radio] + label { cursor: pointer; padding: 0 6px; border: 1px solid #ddd; border-radius: 5px; text-align: center; font-size: .95rem; white-space: nowrap;margin-bottom: 0 }
        .size-radio [type=radio]:checked + label { border: 1px solid #ff5722; margin-bottom: 0 }

        #tBody img { width: 80px; min-width: 50px; margin-right: 5px; }

        .input-quantity { border: 1px solid #ddd; max-width: 100px; padding: 5px 0; border-radius: 5px; text-align: center; }
    </style>
}

<div class="container">
    <h4 class="page-header mb-3">Create Order</h4>
    <form id="formAdd">
        <div class="row">
            <div class="col-xl-8 col-lg-8">
                <div class="card card-body mb-3">
                    <div class="form-group">
                        <label>Add Product</label>
                        <input id="inputProductCode" autocomplete="off" placeholder="Enter product code" type="text" class="form-control">
                    </div>

                    <table class="table product-table">
                        <thead>
                            <tr>
                                <th class="text-left"><strong>Product</strong></th>
                                <th><strong>Price</strong></th>
                                <th class="text-center"><strong>Quantity</strong></th>
                            </tr>
                        </thead>
                        <tbody id="tBody"></tbody>
                    </table>
                </div>
            </div>

            <div class="col-xl-4 col-lg-4">
                <div class="card card-body mb-4">
                    <h5 class="font-weight-bold border-bottom pb-2 mb-3">Order Summary</h5>

                    <div class="d-flex justify-content-between align-items-center">
                        <h6 class="font-weight-bold">Product Total:</h6>
                        <h6 class="font-weight-bold">৳<span id="product-total">0</span></h6>
                    </div>
                    <div class="border-bottom my-2 pb-3">
                        <div class="form-group text-right">
                            <label>Delivery Charge</label>
                            <div class="form-check pl-0">
                                <input type="radio" class="form-check-input" id="inside" data-inside="true" value="@ViewBag.DeliveryCost.InSideDhaka" name="DeliveryCost" required>
                                <label class="form-check-label" for="inside">Inside Dhaka: ৳@ViewBag.DeliveryCost.InSideDhaka</label>
                            </div>
                            <div class="form-check pl-0">
                                <input type="radio" class="form-check-input" data-inside="false" id="outside" value="@ViewBag.DeliveryCost.OutSideDhaka" name="DeliveryCost" required>
                                <label class="form-check-label" for="outside">Outside Dhaka: ৳@ViewBag.DeliveryCost.OutSideDhaka</label>
                            </div>
                        </div>

                        <div class="form-group text-right">
                            <label>Discount</label>
                            <input id="inputDiscount" name="Discount" min="0" class="form-control text-right" type="number" step="0.01">
                        </div>
                    </div>
                    <div class="d-flex justify-content-between align-items-center">
                        <h5 class="mb-0 font-weight-bold">Grand Total:</h5>
                        <h5 class="mb-0 font-weight-bold">৳<strong id="grand-total">0</strong></h5>
                    </div>
                </div>

                <div class="card card-body">
                    <h5 class="font-weight-bold border-bottom pb-2">Delivery Information</h5>
                    <div id="customerInfoContainer" class="mb-3 d-flex justify-content-between"></div>

                    <div class="form-group">
                        <label>Mobile Number</label>
                        <input id="inputMobileNumber" autocomplete="off" name="DeliveryPhone" type="text" class="form-control" required>
                    </div>

                    <div class="form-group">
                        <label>Customer Name</label>
                        <input name="DeliveryName" type="text" class="form-control" required>
                    </div>

                    <div class="form-group">
                        <label>Delivery Address</label>
                        <textarea name="DeliveryAddress" class="form-control" required></textarea>
                    </div>

                    <input id="hiddenCustomerId" type="hidden" name="CustomerId">
                    <button id="btnSubmit" type="submit" class="btn btn-danger">Create Order</button>
                </div>
            </div>
        </div>  
    </form>
</div>

<!---select address-->
<div class="modal fade" id="addressModal" tabindex="-1" role="dialog" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header bg-danger py-1 text-center align-items-center">
                <h5 class="modal-title white-text w-100 font-weight-bold py-2">Select Delivery Address</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true" class="white-text">&times;</span>
                </button>
            </div>

            <div id="addressContainer" class="modal-body"></div>
        </div>
    </div>
</div>



@section Scripts{
    <script>
        (function() {
            const products = [];

            //product autocomplete
            const inputProductCode = document.getElementById("inputProductCode");
            $(inputProductCode).typeahead({
                minLength: 1,
                displayText: function(item) {
                    return `${item.ProductCode}, ${item.ProductName}`;
                },
                afterSelect: function(item) {
                    this.$element[0].value = "";
                },
                source: function(request, result) {
                    $.ajax({
                        url: "/Order/FindProduct",
                        data: { 'code': request },
                        success: function(response) {
                            result(response);
                        },
                        error: function(err) { console.log(err) }
                    });
                },
                updater: function(item) {
                    appendTable(item);
                    return item;
                }
            })

            const tBody = document.getElementById("tBody");

            // check product added or not
            function appendTable(item) {
                const added = products.some(obj => obj.ProductId === item.ProductId);
                if (!added) {

                    //append row
                    createRow(item);

                    //add item to local array
                    item.Quantity = 1;
                    products.push(item);

                    //calculate total
                    calculateTotal();
                }
            }

            //create table row
            let index = 0;

            function createRow(item) {
                const tr = document.createElement("tr");
                tr.innerHTML = `<tr>
                                    <td class="d-flex flex-wrap align-items-center">
                                        <input type="hidden" name="OrderLists[${index}].ProductId" value="${item.ProductId}">
                                        <img src="@baseUrl/${item.ImageFileName}" alt="${item.ProductName}">
                                        <div class="text-left">
                                            <p class="mb-2">${item.ProductCode} - ${item.ProductName}</p>
                                            <div class="d-flex align-items-center flex-wrap">
                                                <strong class="mr-2">Size:</strong>
                                                ${createSize(item.Sizes)}
                                            </div>
                                        </div>
                                    </td>
                                    <td>৳${item.Price}<input type="hidden" name="OrderLists[${index}].UnitPrice" value="${item.Price}"></td>
                                    <td class="text-center">
                                        <input name="OrderLists[${index}].Quantity" class="input-quantity" id="${item.ProductId}" value="1" min="1" max="50" type="number" required>
                                    </td>
                                </tr>`;

                index++;

                tBody.appendChild(tr);
            }

            //create size radio
            function createSize(sizes) {
                let radio = "";

                for (let i = 0; i < sizes.length; i++) {
                    radio += `<div class="size-radio"><input class="inputSize" id="size-${sizes[i].ProductSizeId}" type="radio" name="OrderLists[${index}].ProductSize" value="${sizes[i].SizeName}" required><label for="size-${sizes[i].ProductSizeId}">${sizes[i].SizeName}</label></div>`;
                }
                return radio;
            }

            //calculate total amount
            function calculateTotal() {
                const productTotal = document.getElementById("product-total");
                const grandTotal = document.getElementById("grand-total");
                const deliveryCharge = document.querySelector("input[name=DeliveryCost]:checked");
                const inputDiscount = document.getElementById("inputDiscount");

                const total = products.map(item => item.Price * item.Quantity).reduce((prev, cur) => prev + cur, 0);

                productTotal.textContent = total.toFixed(2);

                const deliveryCost = deliveryCharge ? +deliveryCharge.value : 0;
                const discount = +inputDiscount.value;

                grandTotal.textContent = ((total + deliveryCost) - discount).toFixed(2);

                return total;
            }

            //on change quantity
            tBody.addEventListener("change",
                function(evt) {
                    const element = evt.target;
                    const onInput = element.classList.contains("input-quantity");

                    if (onInput) {
                        products.forEach(item => {
                            if (item.ProductId === +element.id) {
                                item.Quantity = +element.value;
                                return;
                            }
                        });

                        calculateTotal();
                    }
                });

            //delivery charge radio change
            $('input[type=radio][name="DeliveryCost"]').change(function() {
                calculateTotal();
            });

            //discount change
            $('input[type=number][name="Discount"]').change(function() {
                calculateTotal();
            });

            /****DELIVERY ADDRESS****/
            //customer autocomplete
            const inputMobileNumber = document.getElementById("inputMobileNumber");
            $(inputMobileNumber).typeahead({
                minLength: 1,
                displayText: function(item) {
                    return `${item.Phone}, ${item.Name}`;
                },
                afterSelect: function(item) {
                    this.$element[0].value = "";
                },
                source: function(request, result) {
                    $.ajax({
                        url: "/Order/FindCustomer",
                        data: { 'prefix': request },
                        success: function(response) {
                            result(response);
                        },
                        error: function(err) { console.log(err) }
                    });
                },
                updater: function(item) {
                    getCustomerDeliveryAddress(item.CustomerId);
                    setCustomerInfo(item);
                    return item;
                }
            });

            //set customer info
            function setCustomerInfo(item) {
                const customerInfoContainer = document.getElementById("customerInfoContainer");
                customerInfoContainer.innerHTML = ` <strong class="text-success">${item.Name}</strong><a data-toggle="modal" data-target="#addressModal" class="blue-text small">Change Address</a>`;
            }

            //get customer address
            const hiddenCustomerId = document.getElementById("hiddenCustomerId");
            hiddenCustomerId.value = "";

            function getCustomerDeliveryAddress(customerId) {
                hiddenCustomerId.value = "";

                $.ajax({
                    url: "/Order/GetCustomerAddress",
                    data: { customerId },
                    success: function(response) {
                        if (!response.length) {
                            $.notify("Address not found", "error");
                            return;
                        }

                        hiddenCustomerId.value = customerId;

                        if (response.length > 1)
                            createAddress(response);
                        else
                            setAddressInput(response[0]);
                    },
                    error: function(err) {
                        console.log(err)
                    }
                });
            }

            //create address as checkbox
            const addressModal = document.getElementById("addressModal");

            function createAddress(addresses) {
                const addressContainer = document.getElementById("addressContainer");
                let html = "";

                addresses.forEach(item => {
                    html += `<fieldset class="border rounded px-3 mb-3">
                            <legend class="w-auto mb-0">
                                <input type="checkbox" id="address-${item.CustomerAddressId}" data-name="${item.Name}" data-phone="${item.Phone}" data-address="${item.Address}" class="form-check-input selectAddress">
                                <label class="form-check-label pl-3" for="address-${item.CustomerAddressId}"></label>
                            </legend>

                            <h6 class="font-weight-bold mb-1"><i class="fas fa-user"></i> ${item.Name}</h6>
                            <p class="mb-2"><i class="fas fa-phone"></i> ${item.Phone}</p>
                            <p><i class="fas fa-map-marker-alt"></i> ${item.Address}</p>
                        </fieldset>`
                });
                addressContainer.innerHTML = html;

                $(addressModal).modal("show");
            }


            //place order
            const formAdd = document.getElementById("formAdd");
            formAdd.addEventListener("submit",
                function(evt) {
                    evt.preventDefault();

                    if (!products.length) {
                        $.notify("Add product to create order", "error");
                        return;
                    }

                    this.btnSubmit.disabled = true;

                    const model = methods.getForm(this);
                    model.TotalPrice = calculateTotal();
                    model.IsInDhaka = document.querySelector("input[name=DeliveryCost]:checked").getAttribute("data-inside");

                    $.ajax({
                        url: "/Order/PostCreateOrder",
                        type: "POST",
                        data: model,
                        success: response => {
                            this.btnSubmit.disabled = false;

                            if (response.IsSuccess) {
                                location.href = `/Order/Receipt/${response.Data}`;
                                return;
                            }

                            $.notify(response.Message, "error");
                        },
                        error: err => {
                            console.log(err);
                            this.btnSubmit.disabled = false;
                        }
                    });
                })

            //address checkbox checked
            $("#addressContainer").on("change",
                ".selectAddress",
                function() {
                    $(".selectAddress").not(this).prop('checked', false);

                    $(".selectAddress").each(function() {
                        if ($(this).prop('checked') === true)
                            $(this).parent().parent().addClass('border-primary');
                        else
                            $(this).parent().parent().removeClass('border-primary');
                    });

                    //set address input
                    const address = {
                        Name: this.getAttribute("data-name"),
                        Phone: this.getAttribute("data-phone"),
                        Address: this.getAttribute("data-address")
                    }

                    setAddressInput(address);
                    $(addressModal).modal("hide");
                });

            //set address in input
            function setAddressInput(address) {
                formAdd.DeliveryPhone.value = address.Phone;
                formAdd.DeliveryName.value = address.Name;
                formAdd.DeliveryAddress.value = address.Address;
            }
        })();
    </script>
}
